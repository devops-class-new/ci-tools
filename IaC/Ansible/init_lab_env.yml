---
- name: Create AWS EC2 instances
  hosts: localhost
  gather_facts: no
  vars:
    key_name: my-aws-key
    instance_type: t2.micro
    image_id: ami-12345678  # Replace with a valid AMI ID
    region: "{{ lookup('env', 'AWS_REGION') }}"
    security_group: my-security-group
    subnet_id: subnet-12345678  # Replace with your subnet ID
    instance_count: 1

  tasks:
    - name: Launch EC2 instances
      amazon.aws.ec2_instance:
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ image_id }}"
        region: "{{ region }}"
        security_groups: "{{ security_group }}"
        subnet_id: "{{ subnet_id }}"
        wait: yes
        count: "{{ instance_count }}"
        instance_tags:
          Name: Ansible-Created-Instance
      register: ec2

    - name: Wait for SSH to come up
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        instance_ids: "{{ ec2.instance_ids }}"
      register: ec2_info
      until: ec2_info.instances[0].state == 'running'
      retries: 10
      delay: 30

    - name: Add instances to the inventory
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: aws_instances
      with_items: "{{ ec2_info.instances }}"
  
- name: Configure users on EC2 instances
  hosts: aws_instances
  become: yes
  vars:
    user_name: newuser
    user_public_key: ssh-rsa AAAAB3Nz...  # Replace with the actual SSH public key

  tasks:
    - name: Create a new user
      ansible.builtin.user:
        name: "{{ user_name }}"
        state: present
        shell: /bin/bash

    - name: Add SSH key for the user
      ansible.builtin.authorized_key:
        user: "{{ user_name }}"
        key: "{{ user_public_key }}"

    - name: Add the user to the sudoers file
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^{{ user_name }} "
        line: "{{ user_name }} ALL=(ALL) NOPASSWD:ALL"
